name: logs
short: Get logs from the database.
flags:
  - name: id
    type: intList
    help: List of ids
  - name: from
    type: date
    help: From date
  - name: to
    type: date
    help: To date
  - name: level
    type: stringList
    help: Log levels
  - name: columns
    type: stringList
    help: Columns to include in the result
  - name: limit
    help: Limit the number of results
    type: int
    default: 0
  - name: offset
    type: int
    help: Offset
    default: 0
  - name: order_by
    type: string
    default: date DESC
    help: Order by
subqueries:
  meta_keys: |
    SELECT DISTINCT key
    FROM (SELECT key FROM meta_keys UNION SELECT DISTINCT name AS key FROM log_entries_meta WHERE name IS NOT NULL) AS meta_keys
query: |
  {{ $columns := .columns }}
  {{ if not .columns }}
    {{ $columns = sqlColumn (subQuery "meta_keys") }}
  {{ end }}
  WITH meta_values (log_entry_id, name, value) AS (
    SELECT le.id,
           CASE WHEN name IS NULL THEN mk.key ELSE name END AS name,
           CASE
               WHEN lem.type = 1 THEN lem.text_value
               WHEN lem.type = 0 THEN lem.real_value
               WHEN lem.type = 2 THEN lem.blob_value
               WHEN lem.type = 3 THEN lem.blob_value
               ELSE NULL
               END                                          AS value
    FROM log_entries le
             LEFT JOIN log_entries_meta lem ON lem.log_entry_id = le.id
             LEFT JOIN meta_keys mk ON mk.id = lem.meta_key_id
  )
  SELECT le.id,
         le.date,
         le.level,
         {{ range $i, $v := $columns }}
         {{- if (gt $i 0) }},{{ end -}}
         lem_{{ $v }}.value AS {{ $v }}
         {{ end }}
  FROM log_entries le
  {{ range $columns }}
  LEFT JOIN meta_values lem_{{ . }} ON lem_{{ . }}.log_entry_id = le.id AND lem_{{ . }}.name = '{{ . }}'
  {{ end }}
  WHERE 1=1
  {{ if .id }}
    AND id IN ({{ .id | sqlIntIn }})
  {{ end }}
  {{ if .from }} 
    AND date >= {{ .from | sqlDate }}
  {{ end }}
  {{ if .to }}
    AND date <= {{ .to | sqlDate }}
  {{ end }}
  {{ if .level }}
    AND level IN ({{ .level | sqlStringIn }})
  {{ end }}
  ORDER BY {{ .order_by }}
  {{ if .limit }}
    LIMIT {{ .limit }}
  {{ if .offset }}
    OFFSET {{ .offset }}
  {{ end }}
  {{ end }}