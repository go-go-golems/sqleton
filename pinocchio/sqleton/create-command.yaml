name: create-command
short: Generate a Sqleton query
factories:
  openai:
    client:
      timeout: 120
    completion:
      engine: gpt-4
      temperature: 0.2
      max_response_tokens: 2048
      stop: []
      stream: true
flags:
  - name: ddl
    type: stringFromFile
    help: DDL for the table
    required: false
  - name: types
    type: stringList
    help: List of types
    default:
      - int
      - string
      - date
      - stringList
      - intList
      - float
      - bool
      - floatList
  - name: instructions
    type: string
    help: Additional language specific instructions
    required: false
  - name: topic
    type: string
    help: Topic of the query
    required: false
  - name: instructions_file
    type: stringFromFile
    help: Additional language specific instructions
    required: false
  - name: topic_file
    type: stringFromFile
    help: Topic of the query
    required: false
  - name: example_name
    type: string
    help: Name of the example
    default: get all items from WooCommerce orders
  - name: example
    type: stringFromFile
    help: Example of the table
    default: |
      name: animals
      short: Get all animals from the database.
      flags:
        - name: id
          type: intList
          help: List of ids
        - name: name
          type: string
          help: Animal name
        - name: weight
          type: float
          help: Animal weight
        - name: from
          type: date
          help: From date
        - name: to
          type: date
          help: To date
        - name: height
          type: float
          help: Animal height
        - name: color
          type: string
          help: Animal color
        - name: species
          type: stringList
          help: Animal species
        - name: limit
          help: Limit the number of results
          type: int
          default: 0
        - name: offset
          type: int
          help: Offset 
          default: 0
        - name: order_by
          type: string
          default: birthdate DESC
          help: Order by
      query: |
        {{ if .explain }}
          EXPLAIN
        {{ end }}
        SELECT
          id,
          name,
          birthdate,
          weight,
          height,
          color,
          species
        FROM animals
        WHERE 1=1
        {{ if .id }}
          AND id IN ({{ .id | sqlIntIn }})
        {{ end }}
        {{ if .name }}
          AND name = '{{ .name }}'
        {{ end }}
        {{ if .from }} 
          AND birthdate >= {{ .from | sqlDate }}
        {{ end }}
        {{ if .to }}
          AND birthdate <= {{ .to | sqlDate }}
        {{ end }}
        {{ if .weight }}
          AND weight = {{ .weight }}
        {{ end }}
        {{ if .height }}
          AND height = {{ .height }}
        {{ end }}
        {{ if .color }}
          AND color = '{{ .color }}'
        {{ end }}
        {{ if .species }}
          AND species IN ({{ .species | sqlStringIn }})
        {{ end }}
        ORDER BY {{ .order_by }}
        {{ if .limit }}
          LIMIT {{ .limit }}
        {{ if .offset }}
          OFFSET {{ .offset }}
        {{ end }}
        {{ end }}

prompt: |
  I want to generate templates for SQL queries, stored in YAML and with the `query` field using go template syntax.
  The templates expose command line parameters that the user can use to control the query,
  and generate useful WHERE and GROUP BY statements.
  
  The `flags` stored in the YAML can be of different types: {{ .types | join ", " }}. These are then passed to the go 
  template.
  
  Instead of "x > 10", the template language uses "gt x 10".
  
  Here is an example that queries the {{ .example_name }}.
  
  ```yaml
  {{ .example }}
  ```
  
  {{ if .topic_file }}{{ .topic_file }} {{ end }}
  {{ if .topic }} {{ .topic }} {{ end }}
  {{ if .ddl }}Generate a similar template with flags to query the table described by the following DDL:
  
  ```sql
  {{ .ddl }}
  ```
  {{ end }}
  
  Use order_by instead of sort_by.
  For %_like flags, take a stringList, and iterate over it to create a filter statement of LIKE queries joined by OR
  {{ if .instructions }} {{ .instructions }} {{ end }}
  {{ if .instructions_file }} {{ .instructions_file }} {{ end }}

